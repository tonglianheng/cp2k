!-----------------------------------------------------------------------------!
!   CP2K: A general program to perform molecular dynamics simulations         !
!   Copyright (C) 2000 - 2014  CP2K developers group                          !
!-----------------------------------------------------------------------------!

! *****************************************************************************
!> \brief Routines needed for EMD
!> \author Florian Schiffmann (02.09)
! *****************************************************************************

MODULE  rt_propagation_utils


  USE atomic_kind_types,               ONLY: atomic_kind_type,&
                                             get_atomic_kind_set
  USE cp_control_types,                ONLY: dft_control_type
  USE cp_dbcsr_interface,              ONLY: &
       cp_dbcsr_add, cp_dbcsr_copy, cp_dbcsr_create, cp_dbcsr_desymmetrize, &
       cp_dbcsr_filter, cp_dbcsr_get_block, cp_dbcsr_init, cp_dbcsr_init_p, &
       cp_dbcsr_iterator_blocks_left, cp_dbcsr_iterator_next_block, &
       cp_dbcsr_iterator_start, cp_dbcsr_iterator_stop, cp_dbcsr_multiply, &
       cp_dbcsr_scale, cp_dbcsr_set
  USE cp_dbcsr_operations,             ONLY: copy_fm_to_dbcsr,&
                                             cp_dbcsr_allocate_matrix_set,&
                                             cp_dbcsr_deallocate_matrix,&
                                             cp_dbcsr_deallocate_matrix_set
  USE cp_dbcsr_types,                  ONLY: cp_dbcsr_iterator,&
                                             cp_dbcsr_p_type,&
                                             cp_dbcsr_type
  USE cp_fm_basic_linalg,              ONLY: cp_fm_column_scale,&
                                             cp_fm_gemm
  USE cp_fm_types,                     ONLY: cp_fm_create,&
                                             cp_fm_p_type,&
                                             cp_fm_release,&
                                             cp_fm_set_all,&
                                             cp_fm_to_fm,&
                                             cp_fm_type
  USE input_constants,                 ONLY: use_orb_basis_set,&
                                             use_restart_wfn,&
                                             use_rt_restart
  USE input_section_types,             ONLY: section_vals_get_subs_vals,&
                                             section_vals_type
  USE kinds,                           ONLY: dp
  USE mathconstants
  USE orbital_pointers,                ONLY: ncoset
  USE particle_types,                  ONLY: particle_type
  USE qs_environment_types,            ONLY: get_qs_env,&
                                             qs_environment_type
  USE qs_force_types,                  ONLY: qs_force_type
  USE qs_mo_methods,                   ONLY: calculate_density_matrix
  USE qs_mo_types,                     ONLY: get_mo_set,&
                                             mo_set_p_type,&
                                             mo_set_type,&
                                             read_mo_set,&
                                             read_rt_mos_from_restart
  USE qs_neighbor_list_types,          ONLY: neighbor_list_set_p_type
  USE qs_overlap,                      ONLY: build_overlap_matrix
  USE qs_rho_types,                    ONLY: qs_rho_type
  USE rt_propagation_types,            ONLY: get_rtp,&
                                             rt_prop_type
  USE timings,                         ONLY: timeset,&
                                             timestop
#include "./common/cp_common_uses.f90"

  IMPLICIT NONE
  PRIVATE

  PUBLIC:: calc_S_derivs,&
           get_restart_wfn,&
           calculate_dp_imag,&
           calc_c_mat_force

  CHARACTER(len=*), PARAMETER, PRIVATE :: moduleN = 'rt_propagation_utils'


  CONTAINS

! *****************************************************************************
!> \brief Calculates dS/dR respectily the velocity weighted derivatves
!>        only needed for ehrenfest MD.
!>
!> \param qs_env the qs environment
!> \param error
!>
!> \par History
!>      02.2009 created [Manuel Guidon]
!>      02.2014 switched to dbcsr matrices [Samuel Andermatt]
!> \author Florian Schiffmann
! *****************************************************************************
  SUBROUTINE calc_S_derivs(qs_env,error)
    TYPE(qs_environment_type), POINTER       :: qs_env
    TYPE(cp_error_type), INTENT(inout)       :: error

    CHARACTER(LEN=*), PARAMETER :: routineN = 'calc_S_derivs', &
      routineP = moduleN//':'//routineN

    INTEGER                                  :: col_atom, handle, i, j, m, &
                                                maxder, n, nder, &
                                                neighbor_list_id, row_atom
    INTEGER, DIMENSION(6, 2)                 :: c_map_mat
    LOGICAL                                  :: failure, return_s_derivatives
    REAL(dp), DIMENSION(:), POINTER          :: block_values
    REAL(KIND=dp)                            :: one = 1.0_dp, zero = 0.0_dp
    TYPE(atomic_kind_type), DIMENSION(:), &
      POINTER                                :: atomic_kind_set
    TYPE(cp_dbcsr_iterator)                  :: iter
    TYPE(cp_dbcsr_p_type), DIMENSION(:), &
      POINTER                                :: C_mat, S_der, s_derivs
    TYPE(cp_dbcsr_type), POINTER             :: B_mat, tmp_mat, tmp_mat2
    TYPE(neighbor_list_set_p_type), &
      DIMENSION(:), POINTER                  :: sab_orb
    TYPE(particle_type), DIMENSION(:), &
      POINTER                                :: particle_set
    TYPE(qs_force_type), DIMENSION(:), &
      POINTER                                :: force
    TYPE(rt_prop_type), POINTER              :: rtp

    failure = .FALSE.
    CALL timeset(routineN,handle)

    return_s_derivatives=.TRUE.

    NULLIFY (atomic_kind_set)
    NULLIFY (force)
    NULLIFY (particle_set)
    NULLIFY (rtp)
    NULLIFY (s_derivs)

    CALL get_qs_env(qs_env=qs_env,&
                    rtp=rtp,&
                    atomic_kind_set=atomic_kind_set,&
                    particle_set=particle_set,&
                    neighbor_list_id=neighbor_list_id,&
                    sab_orb=sab_orb,&
                    force=force,&
                    error=error)

    CALL get_rtp(rtp=rtp,B_mat=B_mat,C_mat=C_mat,S_der=S_der,error=error)

    nder = 2
    maxder = ncoset(nder)

    ! calculate the overlap derivative matrices
    CALL build_overlap_matrix(qs_env,nderivative=nder,matrix_s=s_derivs,&
         basis_set_id_a=use_orb_basis_set,basis_set_id_b=use_orb_basis_set,sab_nl=sab_orb,error=error)

    NULLIFY(tmp_mat)
    ALLOCATE(tmp_mat)
    CALL cp_dbcsr_init(tmp_mat,error=error)
    CALL cp_dbcsr_create(tmp_mat,template=C_mat(1)%matrix,error=error)
    NULLIFY(tmp_mat2)
    ALLOCATE(tmp_mat2)
    CALL cp_dbcsr_init(tmp_mat2,error=error)
    CALL cp_dbcsr_create(tmp_mat2,template=C_mat(1)%matrix,error=error)
    DO m=1,3
       CALL cp_dbcsr_copy(tmp_mat,s_derivs(m+1)%matrix,error=error)
       CALL cp_dbcsr_desymmetrize(tmp_mat,tmp_mat2,error=error)
       CALL cp_dbcsr_copy(S_der(m)%matrix,tmp_mat2,error=error)
       CALL cp_dbcsr_scale(S_der(m)%matrix,-one,error=error) 
       CALL cp_dbcsr_filter(S_der(m)%matrix,rtp%filter_eps,error=error)
       !The diagonal should be zero
       CALL cp_dbcsr_iterator_start(iter, S_der(m)%matrix)
       DO WHILE (cp_dbcsr_iterator_blocks_left (iter))
          CALL cp_dbcsr_iterator_next_block(iter, row_atom, col_atom, block_values)
          IF(row_atom==col_atom) block_values=0
       END DO
       CALL cp_dbcsr_iterator_stop (iter) 
    END DO


    !calculate scalar product v(Rb)*<alpha|d/dRb beta> (B_mat), and store the first derivatives

     CALL cp_dbcsr_set(B_mat,zero,error=error)
     DO m=1,3
       CALL cp_dbcsr_copy(tmp_mat,s_derivs(m+1)%matrix,error=error)
       CALL cp_dbcsr_desymmetrize(tmp_mat,tmp_mat2,error=error)
       CALL cp_dbcsr_iterator_start(iter, tmp_mat2)
       DO WHILE (cp_dbcsr_iterator_blocks_left (iter))
          CALL cp_dbcsr_iterator_next_block(iter, row_atom, col_atom, block_values)
          IF(row_atom==col_atom) block_values=0
          block_values=-block_values*particle_set(col_atom)%v(m)
       END DO
       CALL cp_dbcsr_iterator_stop (iter) 
       CALL cp_dbcsr_add(B_mat,tmp_mat2,one,one,error=error)
    END DO
    CALL cp_dbcsr_filter(B_mat,rtp%filter_eps,error=error)
    !calculate C matrix: v(Rb)*<d/dRa alpha| d/dRb beta>

    c_map_mat=0
    n=0
    DO j=1,3
       DO m=j,3
          n=n+1
          c_map_mat(n,1)=j
          IF(m==j)CYCLE
          c_map_mat(n,2)=m
       END DO
    END DO


    DO i=1,3
       CALL cp_dbcsr_set(C_mat(i)%matrix,zero,error=error)
    END DO
    DO m=1,6
       CALL cp_dbcsr_copy(tmp_mat,s_derivs(m+4)%matrix,error=error)
       CALL cp_dbcsr_desymmetrize(tmp_mat,tmp_mat2,error=error)
       DO j=1,2
          IF(c_map_mat(m,j)==0)CYCLE
          CALL cp_dbcsr_add(C_mat(c_map_mat(m,j))%matrix,tmp_mat2,one,-one,error)
       END DO
    END DO

    DO m=1,3
       CALL cp_dbcsr_iterator_start(iter, C_mat(m)%matrix)
       DO WHILE (cp_dbcsr_iterator_blocks_left (iter))
          CALL cp_dbcsr_iterator_next_block(iter, row_atom, col_atom, block_values)
          block_values=block_values*particle_set(row_atom)%v(m)
       END DO
       CALL cp_dbcsr_iterator_stop (iter)
       CALL cp_dbcsr_filter(C_mat(m)%matrix,rtp%filter_eps,error=error)
    END DO
    CALL cp_dbcsr_deallocate_matrix_set(s_derivs,error=error)

    CALL cp_dbcsr_deallocate_matrix(tmp_mat,error=error)
    CALL cp_dbcsr_deallocate_matrix(tmp_mat2,error=error)
    CALL timestop(handle)
  END SUBROUTINE


! *****************************************************************************
!> \brief reads the restart file. At the moment only SCF (means only real)
!> \author Florian Schiffmann (02.09)
! *****************************************************************************


  SUBROUTINE get_restart_wfn(qs_env,error)
    TYPE(qs_environment_type), POINTER       :: qs_env
    TYPE(cp_error_type), INTENT(inout)       :: error

    CHARACTER(LEN=*), PARAMETER :: routineN = 'get_restart_wfn', &
      routineP = moduleN//':'//routineN

    INTEGER                                  :: i, id_nr, ispin, nspin, &
                                                qs_env_id
    TYPE(atomic_kind_type), DIMENSION(:), &
      POINTER                                :: atomic_kind_set
    TYPE(cp_dbcsr_p_type), DIMENSION(:), &
      POINTER                                :: p_rmpv
    TYPE(cp_fm_p_type), DIMENSION(:), &
      POINTER                                :: mos_new, mos_old
    TYPE(dft_control_type), POINTER          :: dft_control
    TYPE(mo_set_p_type), DIMENSION(:), &
      POINTER                                :: mo_array
    TYPE(particle_type), DIMENSION(:), &
      POINTER                                :: particle_set
    TYPE(rt_prop_type), POINTER              :: rtp
    TYPE(section_vals_type), POINTER         :: dft_section, input

    NULLIFY(atomic_kind_set,mo_array,particle_set)

    CALL get_qs_env(qs_env,atomic_kind_set=atomic_kind_set,&
         particle_set=particle_set,mos=mo_array, &
         input=input,rtp=rtp,&
         id_nr=qs_env_id, dft_control=dft_control,&
         error=error)

    id_nr=0
    nspin=SIZE(mo_array)
    p_rmpv => qs_env%rho%rho_ao
    dft_section =>  section_vals_get_subs_vals(input,"DFT",error=error)

    CALL get_atomic_kind_set(atomic_kind_set=atomic_kind_set)
    CALL get_rtp(rtp=rtp,mos_old=mos_old,mos_new=mos_new,error=error)

    SELECT CASE(dft_control%rtp_control%initial_wfn)
    CASE(use_restart_wfn)
       CALL read_mo_set(mo_array,atomic_kind_set,particle_set,qs_env%para_env,&
            id_nr=id_nr,multiplicity=dft_control%multiplicity,dft_section=dft_section,&
            error=error)
       DO i=1,SIZE(qs_env%mos)
          CALL cp_fm_to_fm(qs_env%mos(i)%mo_set%mo_coeff,mos_old(2*i-1)%matrix,error)
          CALL cp_fm_set_all(mos_new(2*i)%matrix,zero,zero,error)
       END DO
    CASE(use_rt_restart)
       CALL read_rt_mos_from_restart(mo_array,mos_old,atomic_kind_set,particle_set,qs_env%para_env,&
            id_nr,dft_control%multiplicity,dft_section, error)
    END SELECT


    DO ispin=1,nspin
       CALL calculate_density_matrix(mo_array(ispin)%mo_set,&
            p_rmpv(ispin)%matrix,error=error)
    ENDDO


  END SUBROUTINE get_restart_wfn

! *****************************************************************************
!> \brief calculates the imaginary part of the density matrix
!> \author Florian Schiffmann (02.09)
! *****************************************************************************

  SUBROUTINE calculate_dp_imag(dp_imag,mos_new,mo_set,error)
    TYPE(cp_fm_type), POINTER                :: dp_imag
    TYPE(cp_fm_p_type), DIMENSION(2)         :: mos_new
    TYPE(mo_set_type), POINTER               :: mo_set
    TYPE(cp_error_type), INTENT(inout)       :: error

    CHARACTER(LEN=*), PARAMETER :: routineN = 'calculate_dp_imag', &
      routineP = moduleN//':'//routineN

    INTEGER                                  :: handle, nao, nmo
    REAL(KIND=dp)                            :: alpha
    TYPE(cp_fm_type), POINTER                :: fm_tmp

    CALL timeset(routineN,handle)

    IF ( .NOT. mo_set%uniform_occupation ) THEN ! not all orbitals 1..homo are equally occupied
       NULLIFY(fm_tmp)
       CALL cp_fm_create(fm_tmp,mo_set%mo_coeff%matrix_struct,error=error)
       CALL cp_fm_to_fm(mos_new(2)%matrix,fm_tmp,error=error)
       CALL cp_fm_column_scale(fm_tmp,mo_set%occupation_numbers(1:mo_set%homo))
       alpha=1.0_dp

    ELSE
       alpha=mo_set%maxocc
       CALL cp_fm_create(fm_tmp,mo_set%mo_coeff%matrix_struct,error=error)
       CALL cp_fm_to_fm(mos_new(2)%matrix,fm_tmp,error=error)
    ENDIF
    CALL get_mo_set(mo_set, nao=nao,nmo=nmo)

    CALL cp_fm_gemm("N","T",nao,nao,nmo,alpha,mos_new(1)%matrix,fm_tmp,0.0_dp,dp_imag,error)

    CALL cp_fm_gemm("N","T",nao,nao,nmo,-alpha,fm_tmp,mos_new(1)%matrix,1.0_dp,dp_imag,error)

    CALL cp_fm_release(fm_tmp,error=error)

    CALL timestop(handle)

  END SUBROUTINE calculate_dp_imag

! *****************************************************************************
!> \brief calculates the three additional force contributions needed in EMD
!>        P_imag*C , P_imag*B*S^-1*S_der , P*S^-1*H*S_der
!> \par History
!>      02.2014 switched to dbcsr matrices [Samuel Andermatt]
!> \author Florian Schiffmann (02.09)
! *****************************************************************************

  SUBROUTINE calc_c_mat_force(qs_env,dp_imag,error)
    TYPE(qs_environment_type), POINTER       :: qs_env
    TYPE(cp_fm_type), POINTER                :: dp_imag
    TYPE(cp_error_type), INTENT(inout)       :: error

    CHARACTER(LEN=*), PARAMETER :: routineN = 'calc_c_mat_force', &
      routineP = moduleN//':'//routineN

    INTEGER                                  :: col_atom, handle, i, ikind, &
                                                im, ispin, kind_atom, n, &
                                                natom, re, row_atom, stat
    INTEGER, ALLOCATABLE, DIMENSION(:)       :: atom_of_kind, kind_of
    LOGICAL                                  :: failure, found
    REAL(dp), DIMENSION(:), POINTER          :: block_values, block_values2
    REAL(KIND=dp)                            :: one = 1.0_dp, zero = 0.0_dp
    TYPE(atomic_kind_type), DIMENSION(:), &
      POINTER                                :: atomic_kind_set
    TYPE(cp_dbcsr_iterator)                  :: iter
    TYPE(cp_dbcsr_p_type), DIMENSION(:), &
      POINTER                                :: C_mat, rho_new, S_der, SinvB, &
                                                SinvH
    TYPE(cp_dbcsr_type), POINTER             :: S_inv, tmp
    TYPE(cp_fm_p_type), DIMENSION(:), &
      POINTER                                :: mos_new
    TYPE(mo_set_p_type), DIMENSION(:), &
      POINTER                                :: mos
    TYPE(particle_type), DIMENSION(:), &
      POINTER                                :: particle_set
    TYPE(qs_force_type), DIMENSION(:), &
      POINTER                                :: force
    TYPE(qs_rho_type), POINTER               :: rho
    TYPE(rt_prop_type), POINTER              :: rtp

    failure=.FALSE.

    CALL timeset(routineN,handle)

    NULLIFY(rtp,particle_set,atomic_kind_set)
    CALL get_qs_env(qs_env=qs_env,rtp=rtp,particle_set=particle_set,&
                 atomic_kind_set=atomic_kind_set,force=force,error=error)

    CALL get_rtp(rtp=rtp,C_mat=C_mat,S_der=S_der,S_inv=S_inv,&
                 SinvH=SinvH,SinvB=SinvB,error=error)

    natom = SIZE(particle_set)
    ALLOCATE (atom_of_kind(natom),STAT=stat)
    CPPostcondition(stat==0,cp_failure_level,routineP,error,failure)
    ALLOCATE (kind_of(natom),STAT=stat)
    CPPostcondition(stat==0,cp_failure_level,routineP,error,failure)

    CALL get_atomic_kind_set(atomic_kind_set=atomic_kind_set,atom_of_kind=atom_of_kind,kind_of=kind_of)


    NULLIFY(tmp)
    ALLOCATE(tmp,stat=stat)
    CPPostcondition(stat==0,cp_failure_level,routineP,error,failure)
    CALL cp_dbcsr_init(tmp,error=error)
    CALL cp_dbcsr_create(tmp,template=SinvB(1)%matrix,error=error)


    IF(rtp%linear_scaling) THEN
       CALL get_rtp(rtp=rtp,rho_new=rho_new,error=error)
    ELSE
       CALL get_qs_env(qs_env=qs_env,mos=mos,error=error)
       CALL get_rtp(rtp=rtp,mos_new=mos_new,error=error)
       CALL cp_fm_create(dp_imag,&
       matrix_struct=rtp%ao_ao_fmstruct,&
       name="dp_imag",&
       error=error)
       NULLIFY(rho_new)
       CALL cp_dbcsr_allocate_matrix_set(rho_new,SIZE(mos_new),error=error)
       DO i=1,SIZE(rho_new)
          CALL cp_dbcsr_init_p(rho_new(i)%matrix,error=error)
          CALL cp_dbcsr_create(rho_new(i)%matrix,template=C_mat(1)%matrix,error=error)
       ENDDO
    END IF


    DO ispin=1,SIZE(SinvH)
       re=2*ispin-1
       im=2*ispin
       IF(.NOT.rtp%linear_scaling) THEN
           CALL calculate_dp_imag(dp_imag,mos_new(re:im),mos(ispin)%mo_set,error)
           CALL copy_fm_to_dbcsr(dp_imag,rho_new(im)%matrix,error=error)
           !TODO: get the matrix from the mo's without fixing the sparsity
           CALL get_qs_env(qs_env=qs_env,rho=rho,error=error)
           CALL cp_dbcsr_copy(rho_new(re)%matrix,rho%rho_ao(ispin)%matrix,error=error)
       END IF

       CALL cp_dbcsr_multiply("N","N",one,SinvH(ispin)%matrix,rho_new(re)%matrix,zero,tmp,&
            filter_eps=rtp%filter_eps,error=error)
       CALL cp_dbcsr_multiply("N","N",-one,SinvB(ispin)%matrix,rho_new(im)%matrix,one,tmp,filter_eps=rtp%filter_eps,error=error)
       DO i=1,3
          !Calculate the sum over the hadmard product
          !S_der part

          CALL cp_dbcsr_iterator_start(iter, tmp)
          DO WHILE (cp_dbcsr_iterator_blocks_left (iter))
             CALL cp_dbcsr_iterator_next_block(iter, row_atom, col_atom, block_values)
             ALLOCATE(block_values2(SIZE(block_values)))
             CALL cp_dbcsr_get_block(S_der(i)%matrix, row_atom, col_atom, block_values2, found=found)
             IF(found) THEN
                ikind=kind_of(col_atom)
                kind_atom=atom_of_kind(col_atom)
                !The block_values are in a vector format, so the dot_product is the sum over all elements of the hamand product, that I need
                force(ikind)%ehrenfest(i,kind_atom)=force(ikind)%ehrenfest(i,kind_atom)+&
                2*DOT_PRODUCT(block_values,block_values2)
             ENDIF
             DEALLOCATE(block_values2)
          END DO
          CALL cp_dbcsr_iterator_stop (iter)

          !C_mat part

          CALL cp_dbcsr_iterator_start(iter, rho_new(im)%matrix)
          DO WHILE (cp_dbcsr_iterator_blocks_left (iter))
             CALL cp_dbcsr_iterator_next_block(iter, row_atom, col_atom, block_values)
             ALLOCATE(block_values2(SIZE(block_values)))
             CALL cp_dbcsr_get_block(C_mat(i)%matrix,row_atom,col_atom,block_values2,found=found)
             IF(found) THEN
                ikind=kind_of(col_atom)
                kind_atom=atom_of_kind(col_atom)
                !The block_values are in a vector format, so the dot_product is the sum over all elements of the hamand product, that I need
                force(ikind)%ehrenfest(i,kind_atom)=force(ikind)%ehrenfest(i,kind_atom)+&
                2*DOT_PRODUCT(block_values,block_values2)
             ENDIF
             DEALLOCATE(block_values2)
          END DO
          CALL cp_dbcsr_iterator_stop (iter)
       END DO

    END DO

    ! recall QS forces, at this point have the other sign.
    DO i=1,SIZE(force)
       force(i)%ehrenfest(:,:)=- force(i)%ehrenfest(:,:)
    END DO

    CALL cp_dbcsr_deallocate_matrix(tmp,error=error)
    IF(.NOT.rtp%linear_scaling) THEN
       CALL cp_fm_release(dp_imag,error)
       CALL cp_dbcsr_deallocate_matrix_set(rho_new,error)
    ENDIF

    DEALLOCATE (atom_of_kind,STAT=stat)
    CPPostcondition(stat==0,cp_failure_level,routineP,error,failure)
    DEALLOCATE (kind_of,STAT=stat)
    CPPostcondition(stat==0,cp_failure_level,routineP,error,failure)

    CALL timestop(handle)
  END SUBROUTINE

END MODULE rt_propagation_utils
