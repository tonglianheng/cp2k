!-----------------------------------------------------------------------------!
!   CP2K: A general program to perform molecular dynamics simulations         !
!   Copyright (C) 2000 - 2013  CP2K developers group                          !
!-----------------------------------------------------------------------------!

! *****************************************************************************
!> \brief pool for for elements that are retained and released
!> \note
!>     ____              _ _     __  __           _ _  __         _____ _     _       _____ _ _      _
!>    |  _ \  ___  _ __ ( ) |_  |  \/  | ___   __| (_)/ _|_   _  |_   _| |__ (_)___  |  ___(_) | ___| |
!>    | | | |/ _ \| '_ \|/| __| | |\/| |/ _ \ / _` | | |_| | | |   | | | '_ \| / __| | |_  | | |/ _ \ |
!>    | |_| | (_) | | | | | |_  | |  | | (_) | (_| | |  _| |_| |   | | | | | | \__ \ |  _| | | |  __/_|
!>    |____/ \___/|_| |_|  \__| |_|  |_|\___/ \__,_|_|_|  \__, |   |_| |_| |_|_|___/ |_|   |_|_|\___(_)
!>                                                        |___/
!>      ____ _                  ___                              _ _       _       _
!>     / ___| | ___  ___  ___  |_ _|_ __ ___  _ __ ___   ___  __| (_) __ _| |_ ___| |_   _
!>    | |   | |/ _ \/ __|/ _ \  | || '_ ` _ \| '_ ` _ \ / _ \/ _` | |/ _` | __/ _ \ | | | |
!>    | |___| | (_) \__ \  __/  | || | | | | | | | | | |  __/ (_| | | (_| | ||  __/ | |_| |
!>     \____|_|\___/|___/\___| |___|_| |_| |_|_| |_| |_|\___|\__,_|_|\__,_|\__\___|_|\__, |
!>                                                                                   |___/
!>     _____ _     _       _____ _ _      _
!>    |_   _| |__ (_)___  |  ___(_) | ___| |
!>      | | | '_ \| / __| | |_  | | |/ _ \ |
!>      | | | | | | \__ \ |  _| | | |  __/_|
!>      |_| |_| |_|_|___/ |_|   |_|_|\___(_)
!>
!>      This is a template
!>
!>      **** DO NOT MODIFY THE .F FILES ****
!>      modify the .template and .instantition instead
!> \par History
!>      08.2002 created [fawzi]
!> \author Fawzi Mohamed
! *****************************************************************************
MODULE cp_[el_name]_pool_types
  USE f77_blas
  USE cp_linked_list_[el_name],        ONLY: cp_sll_[el_name]_dealloc,&
                                             cp_sll_[el_name]_get_first_el,&
                                             cp_sll_[el_name]_insert_el,&
                                             cp_sll_[el_name]_next,&
                                             cp_sll_[el_name]_rm_first_el,&
                                             cp_sll_[el_name]_type,&
                                             cp_sll_[el_name]_insert_ordered
  USE cp_para_types,                   ONLY: cp_para_env_type
  USE kinds,                           ONLY: dp
  USE timings,                         ONLY: timeset,&
                                             timestop
#include "cp_common_uses.h"
  [use]
  IMPLICIT NONE
  PRIVATE

  LOGICAL, PRIVATE, PARAMETER :: debug_this_module=.TRUE.
  CHARACTER(len=*), PRIVATE, PARAMETER :: moduleN='cp_[el_name]_pool_types'
  INTEGER, SAVE, PRIVATE :: last_[el_name]_pool_id_nr=0

  PUBLIC :: cp_[el_name]_pool_type, cp_[el_name]_pool_p_type
  PUBLIC :: [el_name]_pool_create, [el_name]_pool_retain,&
       [el_name]_pool_release,&
       [el_name]_pool_create_[el_name], [el_name]_pool_give_back_[el_name],&
       [el_name]_pool_get_el_struct, [el_name]_pool_create_[el_name]_vect,&
       [el_name]_pool_give_back_[el_name]_vect
  PUBLIC :: [el_name]_pools_copy, [el_name]_pools_dealloc,&
       [el_name]_pools_flush_cache, [el_name]_pools_create_[el_name]_vect,&
       [el_name]_pools_give_back_[el_name]_vect
!***

! *****************************************************************************
!> \brief represent a pool of elements with the same structure
!> \param ref_count reference count (see /cp2k/doc/ReferenceCounting.html)
!> \param el_struct the structure of the elements stored in this pool
!> \param cache linked list with the elements in the pool
!> \par History
!>      08.2002 created [fawzi]
!> \author Fawzi Mohamed
! *****************************************************************************
  TYPE cp_[el_name]_pool_type
     PRIVATE
     INTEGER :: ref_count, id_nr
     [el_struct_type], POINTER :: el_struct
     [other_struct_data]
     TYPE(cp_sll_[el_name]_type), POINTER :: cache
  END TYPE cp_[el_name]_pool_type

! *****************************************************************************
!> \brief to create arrays of pools
!> \param pool the pool
!> \par History
!>      08.2002 created [fawzi]
!> \author Fawzi Mohamed
! *****************************************************************************
  TYPE cp_[el_name]_pool_p_type
     TYPE(cp_[el_name]_pool_type), POINTER :: pool
  END TYPE cp_[el_name]_pool_p_type

CONTAINS

! *****************************************************************************
!> \brief creates a pool of elements
!> \param pool the pool to create
!> \param el_struct the structure of the elements that are stored in
!>        this pool
!> \param error variable to control error logging, stopping,...
!>        see module cp_error_handling
!> \par History
!>      08.2002 created [fawzi]
!> \author Fawzi Mohamed
! *****************************************************************************
  SUBROUTINE [el_name]_pool_create(pool, el_struct,&
       [pool_create-extra_args] error)
    TYPE(cp_[el_name]_pool_type), POINTER :: pool
    [el_struct_type], POINTER :: el_struct
    TYPE(cp_error_type),  INTENT(inout) :: error
    [pool_create-extra_args_types]

    LOGICAL :: failure
    CHARACTER(len=*), PARAMETER :: routineN='[el_name]_pool_create',&
         routineP=moduleN//':'//routineN
    INTEGER :: stat
    failure=.FALSE.

    ALLOCATE(pool, stat=stat)
    CPPostcondition(stat==0,cp_failure_level,routineP,error,failure)
    IF (.NOT.failure) THEN
       pool%el_struct=> el_struct
       CALL [el_struct_retain](pool%el_struct,error=error)
       last_[el_name]_pool_id_nr=last_[el_name]_pool_id_nr+1
       pool%id_nr=last_[el_name]_pool_id_nr
       pool%ref_count=1
       NULLIFY(pool%cache)
       [pool_create-post_init_commands]
    END IF
  END SUBROUTINE [el_name]_pool_create

! *****************************************************************************
!> \brief retains the pool (see cp2k/doc/ReferenceCounting.html)
!> \param pool the pool to retain
!> \param error variable to control error logging, stopping,...
!>        see module cp_error_handling
!> \par History
!>      08.2002 created [fawzi]
!> \author Fawzi Mohamed
! *****************************************************************************
  SUBROUTINE [el_name]_pool_retain(pool,error)
    TYPE(cp_[el_name]_pool_type), POINTER :: pool
    TYPE(cp_error_type),  INTENT(inout) :: error

    LOGICAL :: failure
    CHARACTER(len=*), PARAMETER :: routineN='[el_name]_pool_retain',&
         routineP=moduleN//':'//routineN
    failure=.FALSE.

    CPPrecondition(ASSOCIATED(pool),cp_failure_level,routineP,error,failure)
    IF (.NOT. failure) THEN
       CPPrecondition(pool%ref_count>0,cp_failure_level,routineP,error,failure)

       pool%ref_count=pool%ref_count+1
    END IF
  END SUBROUTINE [el_name]_pool_retain

! *****************************************************************************
!> \brief deallocates all the cached elements
!> \param pool the pool to flush
!> \param error variable to control error logging, stopping,...
!>        see module cp_error_handling
!> \par History
!>      08.2002 created [fawzi]
!> \author Fawzi Mohamed
! *****************************************************************************
  SUBROUTINE [el_name]_pool_flush_cache(pool,error)
    TYPE(cp_[el_name]_pool_type), POINTER :: pool
    TYPE(cp_error_type), INTENT(inout) :: error

    LOGICAL :: failure
    CHARACTER(len=*), PARAMETER :: routineN='[el_name]_pool_flush_cache',&
         routineP=moduleN//':'//routineN
    TYPE(cp_sll_[el_name]_type), POINTER :: iterator
    [el_type], POINTER :: el_att
    failure=.FALSE.

    CPPrecondition(ASSOCIATED(pool),cp_failure_level,routineP,error,failure)
    CPPrecondition(pool%ref_count>0,cp_failure_level,routineP,error,failure)
    IF (.NOT. failure) THEN
       iterator => pool%cache
       DO
          IF (.NOT.cp_sll_[el_name]_next(iterator,el_att=el_att,error=error)) EXIT
          CALL [el_release](el_att,error=error)
       END DO
       CALL cp_sll_[el_name]_dealloc(pool%cache,error=error)
    END IF
  END SUBROUTINE [el_name]_pool_flush_cache

! *****************************************************************************
!> \brief releases the given pool (see cp2k/doc/ReferenceCounting.html)
!> \param pool the pool to release
!> \param error variable to control error logging, stopping,...
!>        see module cp_error_handling
!> \par History
!>      08.2002 created [fawzi]
!> \author Fawzi Mohamed
! *****************************************************************************
  SUBROUTINE [el_name]_pool_release(pool,error)
    TYPE(cp_[el_name]_pool_type), POINTER :: pool
    TYPE(cp_error_type), INTENT(inout) :: error

    LOGICAL :: failure
    CHARACTER(len=*), PARAMETER :: routineN='cp_[el_name]_pool_release',&
         routineP=moduleN//':'//routineN
    TYPE(cp_sll_[el_name]_type), POINTER :: iterator
    [el_type], POINTER :: el_att
    INTEGER :: stat
    failure=.FALSE.

    IF (ASSOCIATED(pool)) THEN
       CPPrecondition(pool%ref_count>0,cp_failure_level,routineP,error,failure)
       pool%ref_count=pool%ref_count-1
       IF (pool%ref_count==0) THEN
          pool%ref_count=1
          CALL [el_name]_pool_flush_cache(pool,error=error)
          CALL [el_struct_release](pool%el_struct,error=error)
          pool%ref_count=0

          DEALLOCATE(pool,stat=stat)
          CPPostcondition(stat==0,cp_warning_level,routineP,error,failure)
       END IF
    END IF
    NULLIFY(pool)
  END SUBROUTINE [el_name]_pool_release

! *****************************************************************************
!> \brief returns an element, allocating it if none is in the pool
!> \param pool the pool from where you get the element
!> \param element will contain the new element[create_el-extra_args_doc]
!> \param error variable to control error logging, stopping,...
!>        see module cp_error_handling
!> \par History
!>      08.2002 created [fawzi]
!> \author Fawzi Mohamed
! *****************************************************************************
  SUBROUTINE [el_name]_pool_create_[el_name](pool, element,&
       [create_el-extra_args] error)
    TYPE(cp_[el_name]_pool_type), POINTER :: pool
    [el_type], POINTER :: element
    TYPE(cp_error_type),  INTENT(inout) :: error
    [create_el-extra_args_types]

    LOGICAL :: failure
    CHARACTER(len=*), PARAMETER :: routineN='[el_name]_pool_create_[el_name]',&
         routineP=moduleN//':'//routineN
    INTEGER :: stat

    failure=.FALSE.

    CPPrecondition(ASSOCIATED(pool),cp_failure_level,routineP,error,failure)
    CPPrecondition(pool%ref_count>0,cp_failure_level,routineP,error,failure)
    IF (.NOT.failure) THEN
       IF (ASSOCIATED(pool%cache)) THEN
          element => cp_sll_[el_name]_get_first_el(pool%cache,error=error)
          CALL cp_sll_[el_name]_rm_first_el(pool%cache,error=error)
          [create_el-reuse_commands]
       ELSE
          NULLIFY(element)
          [create_el-create_commands]
       END IF
       [create_el-post_create_commands]
    END IF
    CPPostcondition(ASSOCIATED(element),cp_failure_level,routineP,error,failure)
    CPPostcondition(element%ref_count==1,cp_warning_level,routineP,error,failure)
  END SUBROUTINE [el_name]_pool_create_[el_name]

! *****************************************************************************
!> \brief returns a vector of elements, allocating them, if none
!>      is in the pool
!> \param pool the pool from where you get the elements
!> \param n_elements the number of elements in the vector
!> \param elements will contain the new vector[create_els-extra_args_doc]
!> \param error variable to control error logging, stopping,...
!>        see module cp_error_handling
!> \par History
!>      08.2002 created [fawzi]
!> \author Fawzi Mohamed
! *****************************************************************************
  SUBROUTINE [el_name]_pool_create_[el_name]_vect(pool, n_elements,&
       elements, [create_els-extra_args] error)
    TYPE(cp_[el_name]_pool_type), POINTER :: pool
    INTEGER, INTENT(in) :: n_elements
    [el_array_type], DIMENSION(:), POINTER :: elements
    TYPE(cp_error_type), INTENT(inout) :: error
    [create_els-extra_args_types]

    LOGICAL :: failure
    CHARACTER(len=*), PARAMETER :: routineN='[el_name]_pool_create_[el_name]_vect',&
         routineP=moduleN//':'//routineN
    INTEGER :: stat,i

    failure=.FALSE.

    CPPrecondition(ASSOCIATED(pool),cp_failure_level,routineP,error,failure)
    CPPrecondition(pool%ref_count>0,cp_failure_level,routineP,error,failure)
    ALLOCATE(elements(n_elements), stat=stat)
    CPPostcondition(stat==0,cp_failure_level,routineP,error,failure)
    IF (.NOT.failure) THEN
       DO i=1,n_elements
          NULLIFY(elements(i)[%array_el])
          [create_els-create_el_commands]

       END DO
       [create_els-post_create_commands]
    END IF
  END SUBROUTINE [el_name]_pool_create_[el_name]_vect

! *****************************************************************************
!> \brief returns the element to the pool
!> \param pool the pool where to cache the element
!> \param element the element to give back
!> \param error variable to control error logging, stopping,...
!>        see module cp_error_handling
!> \note
!>      transfers the ownership of the element to the pool
!>      (it is as if you had called cp_[el_name]_release)
!>      Accept give_backs of non associated elements?
!> \par History
!>      08.2002 created [fawzi]
!> \author Fawzi Mohamed
! *****************************************************************************
  SUBROUTINE [el_name]_pool_give_back_[el_name](pool, element, error)
    TYPE(cp_[el_name]_pool_type), POINTER :: pool
    [el_type], POINTER :: element
    TYPE(cp_error_type), INTENT(inout) :: error

    LOGICAL :: failure, did_insert
    CHARACTER(len=*), PARAMETER :: routineN='[el_name]_pool_give_back_[el_name]',&
         routineP=moduleN//':'//routineN
    INTEGER :: stat
    failure=.FALSE.

    CPPrecondition(ASSOCIATED(pool),cp_failure_level,routineP,error,failure)
    CPPrecondition(pool%ref_count>0,cp_failure_level,routineP,error,failure)
    CPPrecondition(ASSOCIATED(element),cp_warning_level,routineP,error,failure)
    IF (.NOT. failure) THEN
       [same_struct_check]
    END IF

    IF (.NOT. failure) THEN
       CPPreconditionNoFail(element%ref_count==1,cp_warning_level,routineP,error)
       IF (cp_debug) THEN
          CALL cp_sll_[el_name]_insert_ordered(pool%cache, el=element,&
               insert_equals=.FALSE., did_insert=did_insert, error=error)
          CPPostcondition(did_insert,cp_failure_level,routineP,error,failure)
       ELSE
          CALL cp_sll_[el_name]_insert_el(pool%cache, el=element,error=error)
       END IF
    END IF
    NULLIFY(element)
  END SUBROUTINE [el_name]_pool_give_back_[el_name]

! *****************************************************************************
!> \brief returns the elements to the pool
!> \param pool the pool where to cache the elements
!> \param elements the elements to give back
!> \param error variable to control error logging, stopping,...
!>        see module cp_error_handling
!> \note
!>      transfers the ownership of the elements to the pool
!>      and deallocates the array of elements
!>      (it is as if you had called cp_[el_name]_vect_dealloc)
!>      Accept give_backs of non associated arrays?
!> \par History
!>      08.2002 created [fawzi]
!> \author Fawzi Mohamed
! *****************************************************************************
  SUBROUTINE [el_name]_pool_give_back_[el_name]_vect(pool, elements, error)
    TYPE(cp_[el_name]_pool_type), POINTER :: pool
    [el_array_type], DIMENSION(:), POINTER :: elements
    TYPE(cp_error_type), INTENT(inout) :: error

    LOGICAL :: failure
    CHARACTER(len=*), PARAMETER :: routineN='[el_name]_pool_give_back_elements_vect',&
         routineP=moduleN//':'//routineN
    INTEGER :: stat,i
    failure=.FALSE.

    CPPrecondition(ASSOCIATED(pool),cp_failure_level,routineP,error,failure)
    CPPrecondition(pool%ref_count>0,cp_failure_level,routineP,error,failure)
    CPPrecondition(ASSOCIATED(elements),cp_warning_level,routineP,error,failure)
    IF (.NOT. failure) THEN
       DO i=1,SIZE(elements)
          IF (ASSOCIATED(elements(i)[%array_el])) THEN
             CALL [el_name]_pool_give_back_[el_name](pool,&
                  elements(i)[%array_el],&
                  error=error)
          END IF
       END DO
       DEALLOCATE(elements,stat=stat)
       CPPostconditionNoFail(stat==0,cp_warning_level,routineP,error)
    END IF
    NULLIFY(elements)
  END SUBROUTINE [el_name]_pool_give_back_[el_name]_vect

! *****************************************************************************
!> \brief returns the structure of the elements in this pool
!> \param pool the pool you are interested in
!> \param error variable to control error logging, stopping,...
!>        see module cp_error_handling
!> \par History
!>      05.2002 created [fawzi]
!> \author Fawzi Mohamed
! *****************************************************************************
FUNCTION [el_name]_pool_get_el_struct(pool,error) RESULT(res)
  [el_struct_type], POINTER :: res
  TYPE(cp_[el_name]_pool_type), POINTER :: pool
  TYPE(cp_error_type), INTENT(inout) :: error

  LOGICAL :: failure
  CHARACTER(len=*), PARAMETER :: routineN='[el_name]_pool_get_el_struct',&
        routineP=moduleN//':'//routineN
  failure=.FALSE.

  CPPrecondition(ASSOCIATED(pool),cp_failure_level,routineP,error,failure)
  CPPrecondition(pool%ref_count>0,cp_failure_level,routineP,error,failure)
  IF (.NOT. failure) THEN
     res => pool%el_struct
  ELSE
     NULLIFY(res)
  END IF
END FUNCTION [el_name]_pool_get_el_struct

!================== pools ================

! *****************************************************************************
!> \brief shallow copy of an array of pools (retains each pool)
!> \param source_pools the pools to copy
!> \param target_pools will contains the new pools
!> \param error variable to control error logging, stopping,...
!>        see module cp_error_handling
!> \par History
!>      11.2002 created [fawzi]
!> \author Fawzi Mohamed
! *****************************************************************************
SUBROUTINE [el_name]_pools_copy(source_pools, target_pools, error)
  TYPE(cp_[el_name]_pool_p_type), DIMENSION(:), POINTER :: source_pools,&
       target_pools
  TYPE(cp_error_type), INTENT(inout) :: error

  LOGICAL :: failure
  INTEGER :: stat, i
  CHARACTER(len=*), PARAMETER :: routineN='[el_name]_pools_copy',&
        routineP=moduleN//':'//routineN
  failure=.FALSE.

  CPPrecondition(ASSOCIATED(source_pools),cp_failure_level,routineP,error,failure)
  IF (.NOT. failure) THEN
     ALLOCATE(target_pools(SIZE(source_pools)),stat=stat)
     CPPostcondition(stat==0,cp_failure_level,routineP,error,failure)
  END IF
  IF (.NOT.failure) THEN
     DO i=1,SIZE(source_pools)
        target_pools(i)%pool => source_pools(i)%pool
        CALL [el_name]_pool_retain(source_pools(i)%pool,error=error)
     END DO
  END IF
END SUBROUTINE [el_name]_pools_copy

! *****************************************************************************
!> \brief deallocate an array of pools (releasing each pool)
!> \param pools the pools to release
!> \param error variable to control error logging, stopping,...
!>        see module cp_error_handling
!> \par History
!>      11.2002 created [fawzi]
!> \author Fawzi Mohamed
! *****************************************************************************
SUBROUTINE [el_name]_pools_dealloc(pools, error)
  TYPE(cp_[el_name]_pool_p_type), DIMENSION(:), POINTER :: pools
  TYPE(cp_error_type), INTENT(inout)   :: error

  LOGICAL :: failure
  INTEGER :: stat, i
  CHARACTER(len=*), PARAMETER :: routineN='[el_name]_pools_dealloc',&
        routineP=moduleN//':'//routineN
  failure=.FALSE.

  IF (ASSOCIATED(pools)) THEN
     DO i=1,SIZE(pools)
        CALL [el_name]_pool_release(pools(i)%pool,error=error)
     END DO
     DEALLOCATE(pools,stat=stat)
     CPPostconditionNoFail(stat==0,cp_warning_level,routineP,error)
  END IF
END SUBROUTINE [el_name]_pools_dealloc

! *****************************************************************************
!> \brief deallocates all the cached elements of an array of pools
!> \param pools the pools to flush
!> \param error variable to control error logging, stopping,...
!>        see module cp_error_handling
!> \par History
!>      09.2002 created [fawzi]
!> \author Fawzi Mohamed
! *****************************************************************************
SUBROUTINE [el_name]_pools_flush_cache(pools, error)
  TYPE(cp_[el_name]_pool_p_type), DIMENSION(:), POINTER :: pools
  TYPE(cp_error_type), INTENT(inout)   :: error

  LOGICAL :: failure
  INTEGER :: stat,i
  CHARACTER(len=*), PARAMETER :: routineN='[el_name]_pools_flush_cache',&
        routineP=moduleN//':'//routineN
  failure=.FALSE.

  CPPrecondition(ASSOCIATED(pools),cp_failure_level,routineP,error,failure)
  IF (.NOT.failure) THEN
     DO i=1,SIZE(pools)
        CALL [el_name]_pool_flush_cache(pools(i)%pool,error=error)
     END DO
  END IF
END SUBROUTINE [el_name]_pools_flush_cache

! *****************************************************************************
!> \brief Returns a vector with an element from each pool
!> \param pools the pools to create the elements from
!> \param elements will contain the vector of elements[create_els-extra_args_doc]
!> \param error variable to control error logging, stopping,...
!>        see module cp_error_handling
!> \par History
!>      09.2002 created [fawzi]
!> \author Fawzi Mohamed
! *****************************************************************************
SUBROUTINE [el_name]_pools_create_[el_name]_vect(pools,elements,&
     [create_els-extra_args]error)
  TYPE(cp_[el_name]_pool_p_type), DIMENSION(:), POINTER :: pools
  [el_array_type], DIMENSION(:), POINTER :: elements
  TYPE(cp_error_type), INTENT(inout) :: error
  [create_els-extra_args_types]

  LOGICAL :: failure
  INTEGER :: stat,i
  CHARACTER(len=*), PARAMETER :: routineN='[el_name]_pools_create_[el_name]_vect',&
        routineP=moduleN//':'//routineN
  TYPE(cp_[el_name]_pool_type), POINTER :: pool

  failure=.FALSE.
  NULLIFY(pool)

  CPPrecondition(ASSOCIATED(pools),cp_failure_level,routineP,error,failure)
  IF (.NOT. failure) THEN
     ALLOCATE(elements(SIZE(pools)),stat=stat)
     CPPostcondition(stat==0,cp_failure_level,routineP,error,failure)
  END IF
  IF (.NOT.failure) THEN
     DO i=1,SIZE(pools)
        NULLIFY(elements(i)[%array_el])
        pool => pools(i)%pool
        [create_els-create_el_commands]

     END DO
     [create_els-post_create_commands]
  END IF
END SUBROUTINE [el_name]_pools_create_[el_name]_vect

! *****************************************************************************
!> \brief returns a vector to the pools. The vector is deallocated
!>      (like cp_[el_name]_vect_dealloc)
!> \param pools the pool where to give back the vector
!> \param elements the vector of elements to give back
!> \param error variable to control error logging, stopping,...
!>        see module cp_error_handling
!> \note
!>      accept unassociated vect?
!> \par History
!>      09.2002 created [fawzi]
!> \author Fawzi Mohamed
! *****************************************************************************
SUBROUTINE [el_name]_pools_give_back_[el_name]_vect(pools,elements,error)
  TYPE(cp_[el_name]_pool_p_type), DIMENSION(:), POINTER :: pools
  [el_array_type], DIMENSION(:), POINTER :: elements
  TYPE(cp_error_type), INTENT(inout) :: error

  LOGICAL :: failure
  INTEGER :: i, stat
  CHARACTER(len=*), PARAMETER :: routineN='[el_name]_pools_give_back_[el_name]_vect',&
        routineP=moduleN//':'//routineN
  failure=.FALSE.

  CPPrecondition(ASSOCIATED(pools),cp_failure_level,routineP,error,failure)
  CPPrecondition(ASSOCIATED(elements),cp_failure_level,routineP,error,failure)
  CPPrecondition(SIZE(pools)==SIZE(elements),cp_failure_level,routineP,error,failure)
  IF (.NOT. failure) THEN
     DO i=1,SIZE(pools)
        CALL [el_name]_pool_give_back_[el_name](pools(i)%pool,&
             elements(i)[%array_el],error=error)
     END DO
     DEALLOCATE(elements, stat=stat)
     CPPostconditionNoFail(stat==0,cp_warning_level,routineP,error)
  END IF
  nullify(elements)
END SUBROUTINE [el_name]_pools_give_back_[el_name]_vect

END MODULE cp_[el_name]_pool_types
