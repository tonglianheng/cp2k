# Author: Alfio Lazzaro, alazzaro@cray.com (2013)

#
# target compiler... these are the options used for building the library.
# They should be aggessive enough to e.g. perform vectorization for the specific CPU (e.g. -ftree-vectorize -march=native),
# and allow some flexibility in reordering floating point expressions (-ffast-math).
# Higher level optimisation (in particular loop nest optimization) should not be used.
# Note: -fp-model fast=1 is default for the Intel compiler
#
target_compile="ifort -O2 -funroll-loops -vec-report2 -warn -mmic -finline-functions -nogen-interfaces -openmp"

#
# target dgemm link options... these are the options needed to link blas (e.g. -lblas)
# blas is used as a fall back option for sizes not included in the library or in those cases where it is faster
# the same blas library should thus also be used when libsmm is linked.
#
blas_linking="-static-intel -mkl=sequential"

#
# SIMD registers type (bytes): sse (16), avx (32), mic (64)
#
SIMD=mic

#
# Directory exported between host and Intel Xeon Phi
#
MICFS=~/.mic_exported_directory

#
# Command to execute natively on the MIC card, using ssh
#
MIC_LD_LIBRARY_PATH=${INTEL_PATH}/compiler/lib/mic
ssh_mic_cmd="ssh mic0"

#
# Command to execute natively on the MIC card, using micnativeloadex
#
export SINK_LD_LIBRARY_PATH=${INTEL_PATH}/compiler/lib/mic/
mic_cmd="/opt/intel/mic/bin/micnativeloadex"

#
# host compiler... this is used only to compile a few tools needed to build
# the library. The library itself is not compiled this way.
# This compiler needs to be able to deal with some Fortran2003 constructs.
#
host_compile="gfortran -O2"
